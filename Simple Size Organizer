# -*- coding: utf-8 -*-
import jarray
import inspect
from java.lang import System
from java.util.logging import Level
from org.sleuthkit.datamodel import SleuthkitCase
from org.sleuthkit.datamodel import AbstractFile
from org.sleuthkit.datamodel import ReadContentInputStream
from org.sleuthkit.datamodel import BlackboardArtifact
from org.sleuthkit.datamodel import BlackboardAttribute
from org.sleuthkit.datamodel import TskData
from org.sleuthkit.autopsy.ingest import IngestModule
from org.sleuthkit.autopsy.ingest.IngestModule import IngestModuleException
from org.sleuthkit.autopsy.ingest import DataSourceIngestModule
from org.sleuthkit.autopsy.ingest import FileIngestModule
from org.sleuthkit.autopsy.ingest import IngestModuleFactoryAdapter
from org.sleuthkit.autopsy.ingest import IngestMessage
from org.sleuthkit.autopsy.ingest import IngestServices
from org.sleuthkit.autopsy.ingest import ModuleDataEvent
from org.sleuthkit.autopsy.coreutils import Logger
from org.sleuthkit.autopsy.casemodule import Case
from org.sleuthkit.autopsy.casemodule.services import Services
from org.sleuthkit.autopsy.casemodule.services import FileManager
from org.sleuthkit.autopsy.casemodule.services import Blackboard
from org.sleuthkit.datamodel import Score
from java.util import Arrays
from org.sleuthkit.datamodel import TskCoreException

########################################################################################################
#Module information... make sure to upade class names for the project.. Dont change the layout
class FileSizeCounterFactory(IngestModuleFactoryAdapter):

    moduleName = "File Size Counter"

    def getModuleDisplayName(self):
        return self.moduleName

    def getModuleDescription(self):
        return "Determines the File sizes"

    def getModuleVersionNumber(self):
        return "1.0"

    # Return true if module wants to get called for each file
    def isFileIngestModuleFactory(self):
        return True

    # can return null if isFileIngestModuleFactory returns false
    def createFileIngestModule(self, ingestOptions):
        return FileSizeCounterModule()
    
########################################################################################################
#PREP
# File-level ingest module.  One gets created per thread.
class FileSizeCounterModule(FileIngestModule):
    #FileSizeCounterFactory.moduleName is a string like "Big Round File Finder" defined in your IngestModuleFactory â€” it helps organize log messages by source.
    _logger = Logger.getLogger(FileSizeCounterFactory.moduleName)

    #Adds context to my logs for example self.log(Level.INFO, "Found a big file") ---> INFO: [FileSizeCounterModule.process] Found a big file
    def log(self, level, msg):
        self._logger.logp(level, self.__class__.__name__, inspect.stack()[1][3], msg)

    def __init__(self):
        self.context = None
        self.log(Level.INFO, "Booting...")

    #Used to setup the stage... Also used to see if the job was canceled...
    def startUp(self, context):
        self.context = context
        self.filesFound = 0
        self.log(Level.INFO, "Started...")

        #Getting current case... 
        current_case = Case.getCurrentCase()
        #Getting File manager
        file_manager = current_case.getServices().getFileManager()
        # This gets the forensic data model needed to create artifacts and attributes
        sleuthkit_case = current_case.getSleuthkitCase()

########################################################################################################

    def process(self, file):

        # Gets currents case --> Gets Skeuthkit Case object which gives me forensic data model --> Gets Blackboard (Which is used to display)
        blackboard = Case.getCurrentCase().getSleuthkitCase().getBlackboard()

        # Skips non-files
        if ((file.getType() == TskData.TSK_DB_FILES_TYPE_ENUM.UNALLOC_BLOCKS) or 
            (file.getType() == TskData.TSK_DB_FILES_TYPE_ENUM.UNUSED_BLOCKS) or 
            (file.isFile() == False)):
            return IngestModule.ProcessResult.OK
 
        #Getting file size
        size = file.getSize()
        category = ""

        #Categorizing the file by size
        if size <= 512:
            category =  "Tiny"
        elif size <= 1024:
            category =  "Very Small"
        elif size <= 10 * 1024:
            category =  "Small"
        elif size <= 50 * 1024:
            category =  "Small+"
        elif size <= 100 * 1024:
            category =  "Small++"
        elif size <= 300 * 1024:
            category =  "Medium-Small"
        elif size <= 700 * 1024:
            category = "Medium"
        elif size <= 1024 * 1024:
            category =  "Medium+"
        elif size <= 2 * 1024 * 1024:
            category =  "Large"
        elif size <= 5 * 1024 * 1024:
            category =  "Large+"
        elif size <= 10 * 1024 * 1024:
            category =  "Large++"
        elif size <= 25 * 1024 * 1024:
            category =  "Very Large"
        elif size <= 50 * 1024 * 1024:
            category =  "Very Large+"
        elif size <= 100 * 1024 * 1024:
            category =  "Huge"
        elif size <= 250 * 1024 * 1024:
            category =  "Huge+"
        elif size <= 500 * 1024 * 1024:
            category =  "Huge++"
        elif size <= 1024 * 1024 * 1024:
            category =  "Gigantic"
        elif size <= 10 * 1024 * 1024 * 1024:
            category =  "Monstrous"
        else:
            category = "Colossal"

        try:
            # Create Interesting File Hit artifact
            artifact = file.newArtifact(BlackboardArtifact.ARTIFACT_TYPE.TSK_INTERESTING_FILE_HIT)

            # Folder hierarchy: Set Name -> Category
            artifact.addAttribute(BlackboardAttribute(
                BlackboardAttribute.ATTRIBUTE_TYPE.TSK_SET_NAME,
                FileSizeCounterFactory.moduleName,
                "File Size Category"))

            artifact.addAttribute(BlackboardAttribute(
                BlackboardAttribute.ATTRIBUTE_TYPE.TSK_CATEGORY,
                FileSizeCounterFactory.moduleName,
                category))

            artifact.addAttribute(BlackboardAttribute(
                BlackboardAttribute.ATTRIBUTE_TYPE.TSK_COMMENT,
                FileSizeCounterFactory.moduleName,
                ("Size:",size,"bytes")))

            # Post the artifact
            blackboard = Case.getCurrentCase().getSleuthkitCase().getBlackboard()
            blackboard.postArtifact(artifact, FileSizeCounterFactory.moduleName)

        except Exception as e:
            self.log(Level.SEVERE, "Error adding interesting file artifact: " + str(e))
        return IngestModule.ProcessResult.OK
